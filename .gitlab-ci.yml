stages:
  - lint
  - test
  - build
  - deploy

lint_frontend:
  stage: lint
  image: node
  script:
    - cd frontend
    - npm install
    - npm run lint

lint_backend:
  stage: lint
  image: registry.gitlab.com/pipeline-components/black:latest
  script:
    - black --check --verbose -- .

playwright_tests:
  stage: test
  only:
    - main
    - dev
    - e2e
    - merge_requests
  image: node:lts
  before_script:
    # Install Python and pip
    - apt-get update -y
    - apt-get install -y python3 python3-pip python3-venv
    # Set up backend Python environment
    - cd backend
    - python3 -m venv .env
    - source .env/bin/activate
    - pip install -r requirements.txt
    - cd ../
    # Set up frontend Node.js environment
    - cd frontend
    - npm install -g pnpm
    - pnpm install
    - cd ../
    # Set up e2e-tests environment
    - cd e2e-tests
    - pnpm install
    - pnpm exec playwright install chromium --with-deps
  script:
    - pnpm exec playwright test
  artifacts:
    when: always
    paths:
      - e2e-tests/playwright-report/
    expire_in: 30 days
  timeout: 60m

build:
  stage: build
  only:
    - main
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  parallel:
    matrix:
      - COMPONENT: [frontend, backend]
  script:
    - docker build -t $CI_REGISTRY/sbibauw/languagelab:$COMPONENT $COMPONENT
    - docker push $CI_REGISTRY/sbibauw/languagelab:$COMPONENT

docker_deploy:
  stage: deploy
  only:
    - main
  image: alpine:latest
  script:
    - echo "/mnt/data/languagelab/repo/scripts/update.sh" > /mnt/pipeline

build-dev:
  stage: build
  only:
    - dev
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  parallel:
    matrix:
      - COMPONENT: [frontend, backend]
  script:
    - docker build -t $CI_REGISTRY/sbibauw/languagelab:${COMPONENT}-dev $COMPONENT
    - docker push $CI_REGISTRY/sbibauw/languagelab:${COMPONENT}-dev

docker_deploy-dev:
  stage: deploy
  only:
    - dev
  image: alpine:latest
  script:
    - echo "/mnt/data/languagelab/repo/scripts/update.dev.sh" > /mnt/pipeline
